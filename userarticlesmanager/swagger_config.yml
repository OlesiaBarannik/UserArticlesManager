swagger: "2.0"
info:
  title: "User Articles Manager API"
  description: "API documentation for managing users and articles."
  version: "1.0.0"
host: "localhost:5000"  # Replace with the actual host
schemes:
  - "http"
basePath: "/api"
tags:
  - name: "Users"
    description: "Operations related to user management."
  - name: "Articles"
    description: "Operations related to article management."
paths:
  /login:
    post:
      tags:
        - "Users"
      summary: "User login"
      description: "Authenticate a user and return a JWT token."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - username
              - password
            properties:
              username:
                type: "string"
                example: "test_user"
              password:
                type: "string"
                example: "test_password"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              access_token:
                type: "string"
                example: "jwt-token"
              message:
                type: "string"
                example: "Login successful"
        401:
          description: "Invalid credentials"
  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users"
      description: "Retrieve a list of all users. Admins only."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
      responses:
        200:
          description: "List of users"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                username:
                  type: "string"
                role:
                  type: "string"
        403:
          description: "Access denied"
    post:
      tags:
        - "Users"
      summary: "Create a user"
      description: "Allows admins to create a new user."
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - username
              - password
              - role
            properties:
              username:
                type: "string"
                example: "new_user"
              password:
                type: "string"
                example: "password123"
              role:
                type: "string"
                example: "VIEWER"
      responses:
        201:
          description: "User created successfully"
        403:
          description: "Access denied"
  /users/{user_id}:
    patch:
      tags:
        - "Users"
      summary: "Update a user"
      description: "Allows admins to update user details."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "path"
          name: "user_id"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "updated_user"
              role:
                type: "string"
                example: "EDITOR"
      responses:
        200:
          description: "User updated successfully"
        403:
          description: "Access denied"
    delete:
      tags:
        - "Users"
      summary: "Delete a user"
      description: "Allows admins to delete a user."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "path"
          name: "user_id"
          required: true
          type: "integer"
      responses:
        200:
          description: "User deleted successfully"
        403:
          description: "Access denied"
  /articles:
    post:
      tags:
        - "Articles"
      summary: "Create an article"
      description: "Allows authorized users to create an article."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - title
              - content
            properties:
              title:
                type: "string"
                example: "Article Title"
              content:
                type: "string"
                example: "Content of the article."
              user_id:
                type: "integer"
                example: 1
      responses:
        201:
          description: "Article created successfully"
        400:
          description: "Validation error"
        403:
          description: "Access denied"
    get:
      tags:
        - "Articles"
      summary: "Get all articles"
      description: "Retrieve a list of all articles."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
      responses:
        200:
          description: "List of articles"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                title:
                  type: "string"
                content:
                  type: "string"
                user_id:
                  type: "integer"
  /articles/{article_id}:
    get:
      tags:
        - "Articles"
      summary: "Get an article"
      description: "Retrieve an article by its ID."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "path"
          name: "article_id"
          required: true
          type: "integer"
      responses:
        200:
          description: "Article details"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
              title:
                type: "string"
              content:
                type: "string"
              user_id:
                type: "integer"
        404:
          description: "Article not found"
    patch:
      tags:
        - "Articles"
      summary: "Update an article"
      description: "Allows authorized users to update an article."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "path"
          name: "article_id"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Updated Article Title"
              content:
                type: "string"
                example: "Updated content."
      responses:
        200:
          description: "Article updated successfully"
        403:
          description: "Access denied"
    delete:
      tags:
        - "Articles"
      summary: "Delete an article"
      description: "Allows admins or article owners to delete an article."
      parameters:
        - in: "header"
          name: "Authorization"
          required: true
          type: "string"
          example: "Bearer jwt-token"
        - in: "path"
          name: "article_id"
          required: true
          type: "integer"
      responses:
        200:
          description: "Article deleted successfully"
        403:
          description: "Access denied"
        404:
          description: "Article not found"
